cmake_minimum_required(VERSION 3.12 FATAL_ERROR)
########################################################################
project(qcdnum LANGUAGES CXX C Fortran)
set(EXTERNAL_VERSION_STRING "18.00.00")
string(REPLACE "."  ";" EXTERNAL_VERSION_LIST "${EXTERNAL_VERSION_STRING}")
list(GET EXTERNAL_VERSION_LIST 0 QCDNUM_VERSION_MAJOR)
list(GET EXTERNAL_VERSION_LIST 1 QCDNUM_VERSION_MINOR)
list(GET EXTERNAL_VERSION_LIST 2 QCDNUM_VERSION_PATCH)
set(PROJECT_VERSION ${QCDNUM_VERSION_MAJOR}.${QCDNUM_VERSION_MINOR}.${QCDNUM_VERSION_PATCH})
SET(QCDNUM_VERSION "${QCDNUM_VERSION_MAJOR}-${QCDNUM_VERSION_MINOR}-${QCDNUM_VERSION_PATCH}")
set(PACKAGE_VERSION ${QCDNUM_VERSION})
########################################################################
include("GNUInstallDirs")
set(CMAKE_VERBOSE_MAKEFILE ON)
set(CMAKE_POSITION_INDEPENDENT_CODE TRUE)
if(CMAKE_BUILD_TYPE)
  message(STATUS "QCDNUM Build type: ${CMAKE_BUILD_TYPE}")
else(CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE "Release")
  message(STATUS "QCDNUM Build type not specified, use: ${CMAKE_BUILD_TYPE}")
endif(CMAKE_BUILD_TYPE)
string(TOUPPER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE)
message(STATUS "QCDNUM: CMAKE_Fortran_COMPILER_ID ${CMAKE_Fortran_COMPILER_ID} " )
message(STATUS "QCDNUM: CMAKE_Fortran_FLAGS ${CMAKE_Fortran_FLAGS} ${CMAKE_Fortran_FLAGS_${CMAKE_BUILD_TYPE}} " )
message(STATUS "QCDNUM: CMAKE_CXX_COMPILER_ID ${CMAKE_CXX_COMPILER_ID} " )
message(STATUS "QCDNUM: CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE}} " )
message(STATUS "QCDNUM: CMAKE_C_COMPILER_ID ${CMAKE_C_COMPILER_ID} " )
message(STATUS "QCDNUM: CMAKE_C_FLAGS ${CMAKE_C_FLAGS} ${CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE}} " )
########################################################################
option(QCDNUM_ENABLE_TESTING      "Enables testing" ON)
option(QCDNUM_ENABLE_OPENMP          "Enables MPI"     OFF)
option(QCDNUM_ENABLE_SHARED       "Enables build of shared library" OFF)
########################################################################
if(QCDNUM_ENABLE_OPENMP)
  find_package(OpenMP REQUIRED)
endif()
add_definitions(-DDATA_PATH=\"${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_DATADIR}\" 
                -DQCDNUM_VERSION=\"${QCDNUM_VERSION}\")
########################################################################
set(exec_prefix "\$\{prefix\}")
set(libdir "\$\{exec_prefix\}/${CMAKE_INSTALL_LIBDIR}")
set(includedir "\$\{prefix\}/${CMAKE_INSTALL_INCLUDEDIR}")
set(prefix ${CMAKE_INSTALL_PREFIX})
include(FortranCInterface)
FortranCInterface_HEADER(${CMAKE_CURRENT_BINARY_DIR}/CxxHead/QCDNUM/FC.h MACRO_NAMESPACE "FC_")
file(STRINGS ${CMAKE_CURRENT_BINARY_DIR}/CxxHead/QCDNUM/FC.h FC_H_CONTENT_LIST)
list(FILTER FC_H_CONTENT_LIST INCLUDE REGEX "^#define")
list(FILTER FC_H_CONTENT_LIST EXCLUDE REGEX "FC_HEADER_INCLUDED")
list(JOIN FC_H_CONTENT_LIST "\n" FC_H_CONTENT)
string(REPLACE "FC_GLOBAL" "FC_FUNC" FC_H_CONTENT "${FC_H_CONTENT}")
set(FortranWrappers_h_CONTENT "\
/* include/QCDNUM/FortranWrappers.h.in.  Generated by cmake.  */\n\
/* Define to a macro mangling the given C identifier (in lower and upper \n\
   case), which must not contain underscores, for linking with Fortran. */\n\
/* As FC_FUNC, but for C identifiers containing underscores. */\n\
${FC_H_CONTENT}\n\
/* Name of package */\n\
#define PACKAGE \"qcdnum\"\n\n\
/* Define to the address where bug reports for this package should be sent. */\n\
#define PACKAGE_BUGREPORT \"h24@nikhef.nl\"\n\n\
/* Define to the full name of this package. */\n\
#define PACKAGE_NAME \"QCDNUM\"\n\n\
/* Define to the full name and version of this package. */\n\
#define PACKAGE_STRING \"QCDNUM ${QCDNUM_VERSION}\"\n\n\
/* Define to the one symbol short name of this package. */\n\
#define PACKAGE_TARNAME \"qcdnum\"\n\n\
/* Define to the home page for this package. */\n\
#define PACKAGE_URL \"\"\n\n\
/* Define to the version of this package. */\n\
#define PACKAGE_VERSION \"${QCDNUM_VERSION}\"\n\n\
/* Version number of package */\n\
#define VERSION \"${QCDNUM_VERSION}\"\n\
$<IF:$<BOOL:${QCDNUM_ENABLE_OPENMP}>,#define QCDNUM_MPI 1,/* #undef QCDNUM_MPI */>\n\n\
")
file(GENERATE OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/CxxHead/QCDNUM/FortranWrappers.h CONTENT "${FortranWrappers_h_CONTENT}")
########################################################################
set(libQCDNUMCCWrap_la_SOURCES   hqstf.cc mbutil.cc qcdnum.cc splint.cc wstore.cc zmstf.cc)
list(TRANSFORM libQCDNUMCCWrap_la_SOURCES PREPEND "${CMAKE_CURRENT_SOURCE_DIR}/CxxWrap/")
add_library(QCDNUMCCWrap OBJECT ${libQCDNUMCCWrap_la_SOURCES})
target_include_directories(QCDNUMCCWrap PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/CxxHead)
target_include_directories(QCDNUMCCWrap PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/CxxHead)
########################################################################
set(zmstf_SRC src/zmcij.f src/zmstfs.f src/zmweits.f)
set(zmstf_CIJ cij/cij_nlo.f cij/xc2ns2p.f cij/xc2sg2p.f cij/xc3ns2p.f 
              cij/xclns2p.f cij/xclns3p.f cij/xclsg2p.f cij/xclsg3p.f)
list(TRANSFORM zmstf_SRC PREPEND "${CMAKE_CURRENT_SOURCE_DIR}/zmstf/")
list(TRANSFORM zmstf_CIJ PREPEND "${CMAKE_CURRENT_SOURCE_DIR}/zmstf/")
add_library(zmstf OBJECT ${zmstf_SRC} ${zmstf_CIJ})
target_include_directories(zmstf PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/zmstf/inc)
########################################################################
SET(splint_SRC src/srcsplint.f src/usrsplint.f)
list(TRANSFORM splint_SRC PREPEND "${CMAKE_CURRENT_SOURCE_DIR}/splint/")
add_library(splint OBJECT ${splint_SRC})
target_include_directories(splint PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/splint/inc)
########################################################################
SET(qcdnum_SRC src/srcAlfa.f src/srcConvolution.f src/srcEvolNN.f 
               src/srcEvolve.f src/srcEvolveOld.f src/srcFastEngine.f 
               src/srcFillPijAij.f src/srcGlobalid.f src/srcGrid.f 
               src/srcInterpolation.f src/srcMatch.f src/srcParamStore.f 
               src/srcPdfFill.f src/srcPdfInOut.f src/srcPdfNN.f 
               src/srcPdfTables.f src/srcPijFunctions.f src/srcQcards.f 
               src/srcQcdInit.f src/srcQcdSpline.f src/srcQcdUtil.f 
               src/srcTboxWeights.f src/srcThresholds.f src/srcTransform.f 
               src/srcWorkspace.f)
SET(qcdnum_PIJ pij/ome.f pij/pij_lo.f pij/pij_nlo.f pij/vogelsang.f
               pij/wgplg.f pij/xa2hgp.f pij/xpij2p.f pij/xpns2p.f)
SET(qcdnum_USR usr/cxxwrappers.f usr/obsolete.f usr/usrGlobalId.f 
               usr/usrchecks.f usr/usrcvol.f usr/usrerr.f usr/usrevnn.f 
               usr/usrevol.f usr/usrfast.f usr/usrgrd.f usr/usrini.f 
               usr/usrparams.f usr/usrpdf.f usr/usrqcards.f 
               usr/usrstore.f usr/usrwgt.f)
list(TRANSFORM qcdnum_SRC PREPEND "${CMAKE_CURRENT_SOURCE_DIR}/qcdnum/")
list(TRANSFORM qcdnum_PIJ PREPEND "${CMAKE_CURRENT_SOURCE_DIR}/qcdnum/")
list(TRANSFORM qcdnum_USR PREPEND "${CMAKE_CURRENT_SOURCE_DIR}/qcdnum/")
add_library(qcdnumsmall OBJECT ${qcdnum_SRC} ${qcdnum_PIJ} ${qcdnum_USR})
target_include_directories(qcdnumsmall PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/qcdnum/inc)
########################################################################
SET(mbutil_SRC src/bmats.f src/compa.f src/fmtpak.f src/hash.f src/mbits.f 
               src/mchar.f src/polint.f src/store.f src/utils.f src/vectors.f)
list(TRANSFORM mbutil_SRC PREPEND "${CMAKE_CURRENT_SOURCE_DIR}/mbutil/")
add_library(mbutil OBJECT ${mbutil_SRC})
target_include_directories(mbutil PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/mbutil/inc)
########################################################################
SET(hqstf_SRC src/hqstfs.f src/hqweits.f)
SET(hqstf_CIJ cij/asymp.f cij/born.f cij/gcorrl.f cij/gcorrt.f cij/locate.f 
              cij/qchfun.f cij/qcorrl.f cij/qcorrt.f cij/thresh.f)
list(TRANSFORM hqstf_SRC PREPEND "${CMAKE_CURRENT_SOURCE_DIR}/hqstf/")
list(TRANSFORM hqstf_CIJ PREPEND "${CMAKE_CURRENT_SOURCE_DIR}/hqstf/")
add_library(hqstf OBJECT ${hqstf_SRC} ${hqstf_CIJ})
target_include_directories(hqstf PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/hqstf/inc)
########################################################################
set(wstore_SRC   src/istore.f src/wstore.f)
list(TRANSFORM wstore_SRC PREPEND "${CMAKE_CURRENT_SOURCE_DIR}/wstore/")
add_library(wstore OBJECT ${wstore_SRC})
target_include_directories(wstore PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/wstore/inc)
########################################################################
configure_file(bin/qcdnum-config.in ${PROJECT_BINARY_DIR}/bin/qcdnum-config @ONLY)
add_library(QCDNUM STATIC
                          $<TARGET_OBJECTS:mbutil>
                          $<TARGET_OBJECTS:wstore>
                          $<TARGET_OBJECTS:splint>
                          $<TARGET_OBJECTS:qcdnumsmall>
                          $<TARGET_OBJECTS:zmstf>
                          $<TARGET_OBJECTS:hqstf>
                          $<TARGET_OBJECTS:QCDNUMCCWrap>
                          )
install(TARGETS QCDNUM DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libs)
set_target_properties(QCDNUM PROPERTIES OUTPUT_NAME QCDNUM 
                                               ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/outputs/static/$<0:>
                                               LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/outputs/static/$<0:>
                                               RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/outputs/static/$<0:>
                                               )
if (QCDNUM_ENABLE_OPENMP)
  target_link_libraries(QCDNUM PRIVATE OpenMP::OpenMP_Fortran OpenMP::OpenMP_CXX)
  target_link_libraries(mbutil PRIVATE OpenMP::OpenMP_Fortran OpenMP::OpenMP_CXX)
  target_link_libraries(wstore PRIVATE OpenMP::OpenMP_Fortran OpenMP::OpenMP_CXX)
  target_link_libraries(splint PRIVATE OpenMP::OpenMP_Fortran OpenMP::OpenMP_CXX)
  target_link_libraries(qcdnumsmall PRIVATE OpenMP::OpenMP_Fortran OpenMP::OpenMP_CXX)
  target_link_libraries(zmstf PRIVATE OpenMP::OpenMP_Fortran OpenMP::OpenMP_CXX)
  target_link_libraries(hqstf PRIVATE OpenMP::OpenMP_Fortran OpenMP::OpenMP_CXX)
  target_link_libraries(QCDNUMCCWrap PRIVATE OpenMP::OpenMP_Fortran OpenMP::OpenMP_CXX)

endif()
if (QCDNUM_ENABLE_SHARED)
  add_library(QCDNUM_shared SHARED
                          $<TARGET_OBJECTS:mbutil>
                          $<TARGET_OBJECTS:wstore>
                          $<TARGET_OBJECTS:splint>
                          $<TARGET_OBJECTS:qcdnumsmall>
                          $<TARGET_OBJECTS:zmstf>
                          $<TARGET_OBJECTS:hqstf>
                          $<TARGET_OBJECTS:QCDNUMCCWrap>
                          )
  install(TARGETS QCDNUM_shared DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libs)
  set_target_properties(QCDNUM_shared PROPERTIES OUTPUT_NAME QCDNUM 
                                                 ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/outputs/shared/$<0:>
                                                 LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/outputs/shared/$<0:>
                                                 RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/outputs/shared/$<0:>
                                                 SOVERSION 0 ) 
  if (QCDNUM_ENABLE_OPENMP)
    target_link_libraries(QCDNUM_shared PRIVATE OpenMP::OpenMP_Fortran OpenMP::OpenMP_CXX)
  endif()
endif()

########################################################################
install(FILES ${PROJECT_BINARY_DIR}/bin/qcdnum-config DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT libs)
install(FILES ${PROJECT_BINARY_DIR}/CxxHead/QCDNUM/FortranWrappers.h 
              ${PROJECT_SOURCE_DIR}/CxxHead/QCDNUM/QCDNUMfw.h 
              ${PROJECT_SOURCE_DIR}/CxxHead/QCDNUM/QCDNUM.h 
              DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/QCDNUM/ COMPONENT libs)
install(FILES ${PROJECT_SOURCE_DIR}/README  DESTINATION ${CMAKE_INSTALL_DOCDIR}/ COMPONENT libs)
########################################################################
if(QCDNUM_ENABLE_TESTING)
  ENABLE_TESTING()
  set(TSTS example.f example.cc exampledc.f 
  testsgns.f testsgns.cc getgluon.f getgluon.cc pdfsets.f pdfsets.cc     
  testzmstf.f testzmstf.cc testhqstf.f testhqstf.cc timing.f timing.cc 
  convolit.f ftwo.f ftwo.cc longlist.f sgevolution.f wspace.f wspace.cc  
  )
  foreach(fl ${TSTS})
    string(REPLACE "." "_" flexe "${fl}")
    file(MAKE_DIRECTORY ${PROJECT_BINARY_DIR}/test${flexe}/weights/)
    file(MAKE_DIRECTORY ${PROJECT_BINARY_DIR}/test${flexe}/testjobs/)
    file(MAKE_DIRECTORY ${PROJECT_BINARY_DIR}/test${flexe}/dcards/)
    file(COPY 
            ${PROJECT_SOURCE_DIR}/dcards/convolit.dcards
            ${PROJECT_SOURCE_DIR}/dcards/example.dcards
            ${PROJECT_SOURCE_DIR}/dcards/longlist.dcards
            DESTINATION
            ${PROJECT_BINARY_DIR}/test${flexe}/dcards/
            )
    add_executable(${flexe} testjobs/${fl})
    target_include_directories(${flexe} PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/CxxHead)
    target_include_directories(${flexe} PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/CxxHead)
    target_link_libraries(${flexe} PRIVATE QCDNUM)
    add_test(NAME test${flexe} COMMAND ${CMAKE_CURRENT_BINARY_DIR}/${flexe} WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/test${flexe}/testjobs/) 
    if (QCDNUM_ENABLE_OPENMP)
      target_link_libraries(${flexe} PUBLIC OpenMP::OpenMP_Fortran OpenMP::OpenMP_CXX OpenMP::OpenMP_C)
      SET_TESTS_PROPERTIES( test${flexe} PROPERTIES ENVIRONMENT "OMP_NUM_THREADS=4")
    endif()    
  endforeach() 
endif()
